type Tasks {
  tasks_id: ID!
  task_name: String!
  semester: Float!
  subject_code: Float!
  alloted_students: [String!]
  alloted_teachers: [String!]!
}

type Subject {
  subject_id: ID!
  sub_name: String!
  sub_code: Float!
  sub_of_sem: Float!
  tasks: [String!]!
}

type Students {
  stud_id: ID!
  stud_name: String!
  stud_roll: Float!
  semester: Float!
  username: String!
  password: String!
  tasks: [String!]
}

type Teachers {
  teacher_id: ID!
  teacher_name: String!
  teacher_subject: String!
  assigned_tasks: [String!]
}

type loginUserObject {
  username: String!
  password: String!
  accessToken: String
  role: String!
}

input UserLoginInput {
  username: String!
  password: String!
  accessToken: String
  role: String!
}

type Query {
  getTasks: [Tasks!]!
  getSubjects: [Subject!]!
  getSubjectById(subject_code: Float!): Subject!
  getStudents: [Students!]!
  getTeachers: [Teachers!]!
}

type Mutation {
  createTask(createTasksType: CreateTasksType!): Tasks!
  deleteTask(id: String!): Boolean!
  createSubject(createSubjectInput: CreateSubjectInput!): Subject!
  createStudent(createStudentInput: CreateStudentInput!): Students!
  createTeacher(createTeacherInput: CreateTeachersInput!): Teachers!
  studentLogin(loginUserInput: UserLoginInput!): loginUserObject!
}

input CreateTasksType {
  task_name: String!
  semester: Float!
  subject_code: Float!
}

input CreateSubjectInput {
  sub_name: String!
  sub_code: Float!
  sub_of_sem: Float!
}

input CreateStudentInput {
  stud_name: String!
  stud_roll: Float!
  semester: Float!
  username: String!
  password: String!
}

input CreateTeachersInput {
  teacher_name: String!
  teacher_subject: String!
  username: String!
  password: String!
}