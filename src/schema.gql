type Tasks {
  tasks_id: ID!
  task_name: String!
  semester: Float!
  subject_code: Float!
  alloted_students: [String!]
  teacher: String!
  deadline: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PersonalTasks {
  tasks_id: ID!
  task_name: String!
  username: String!
  content: [String!]
  alloted_user: String
  semester: Float
  deadline: DateTime
}

type Subject {
  subject_id: ID!
  sub_name: String!
  sub_code: Float!
  sub_of_sem: Float!
}

type TasksWithStatusType {
  todo: [String!]
  executing: [String!]
  completed: [String!]
  review: [String!]
  finished: [String!]
}

type Students {
  stud_id: ID!
  stud_name: String!
  stud_roll: Float!
  semester: Float!
  username: String!
  password: String!
  tasks: [String!]
  comment: [String!]
  taskswithstatus: TasksWithStatusType
}

type File {
  file_id: String!
  task_Name: String!
  stud_id: String!
  fileName: String!
}

type Teachers {
  teacher_id: ID!
  teacher_name: String!
  teacher_subject: String!
  assigned_tasks: [String!]
}

type loginUserObject {
  username: String!
  password: String!
  accessToken: String
  role: String!
}

input UserLoginInput {
  username: String!
  password: String!
  accessToken: String
  role: String!
}

type Query {
  getTasks: [Tasks!]!
  checkDeadlines: [Tasks!]!
  getSubjects: [Subject!]!
  getSubjectById(subject_code: Float!): Subject!
  getStudents: [Students!]!
  getFile(Cred: FileInput!): [File!]!
  getStudentByUsername(getStudentByName: String!): Students!
  getAllTodoOfStudent(userName: String!): [String!]!
  getTeachers: [Teachers!]!
}

input FileInput {
  stud_id: String!
  task_name: String!
}

type Mutation {
  createTask(createTasksType: CreateTasksType!): Tasks!
  deleteTask(id: String!): Boolean!
  createTaskForPersonal(createForPersonalUse: CreateCustomTasksType!): PersonalTasks!
  createSubject(createSubjectInput: CreateSubjectInput!): Subject!
  deleteSubject(id: String!): Boolean!
  createStudent(createStudentInput: CreateStudentInput!): Students!
  commentOnStudentTask(commentOnStudentTask: CommentTaskInput!): Boolean!
  moveTaskToExecuting(moveToExecution: MoveToStatusInput!): Boolean!
  moveTaskToCompleted(moveToCompleted: MoveToStatusInput!): Boolean!
  moveTaskToTodo(moveToTodo: MoveToStatusInput!): Boolean!
  createTeacher(createTeacherInput: CreateTeachersInput!): Teachers!
  broadcastBasedOnSem(EnterMessageAndSem: BroadcastInput!): String!
  userLogin(loginUserInput: UserLoginInput!): loginUserObject!
}

input CreateTasksType {
  task_name: String!
  semester: Float!
  subject_code: Float!
  deadline: DateTime
}

input CreateCustomTasksType {
  task_name: String!
  username: String!
  content: [String!]
  semester: Float
  deadline: DateTime
}

input CreateSubjectInput {
  sub_name: String!
  sub_code: Float!
  sub_of_sem: Float!
}

input CreateStudentInput {
  stud_name: String!
  stud_roll: Float!
  semester: Float!
  username: String!
  password: String!
}

input CommentTaskInput {
  task_name: String!
  stud_name: String!
  comment: String!
}

input MoveToStatusInput {
  task_name: String!
  student_roll: Float!
}

input CreateTeachersInput {
  teacher_name: String!
  teacher_subject: String!
  username: String!
  password: String!
}

input BroadcastInput {
  message: String!
  semester: Float!
  name_of_teacher: String!
}